version: "3.9"
services:
  screenshot-requests-service:
    platform: 'linux/amd64'
    build:
      context: ./screenshot-requests-service/
      dockerfile: dev.Dockerfile
    volumes:
      - ./screenshot-requests-service/:/app
    depends_on:
      - kafka
      - mongo
    environment:
      PORT: 8000
      MONGO_HOST: mongo
      MONGO_PORT: 27017
      MONGO_USER: root
      MONGO_PASSWORD: example
      MONGO_DB_NAME: 'screenshot-requests'
      KAFKA_BROKERS_CSV: kafka:9092
      KAFKA_GROUP_ID: 'screenshot-requests'
      CONSUMER_SERVICE_GROUP_ID: 'consumer'
      PAGE_CAPTURE_SERVICE_GROUP_ID: 'page-capture'
      SCREENSHOT_META_SERVICE_GROUP_ID: 'screenshot-meta'
      NOTIFICATION_SERVICE_GROUP_ID: 'notifications'
      SCREENSHOT_REQUEST_SERVICE_GROUP_ID: 'screenshot-requests'
    ports:
      - "8000:8000"
      - "9339:9229"
    entrypoint: ["npm", "run", "start:debug"]

  notifications-service:
    platform: 'linux/amd64'
    build:
      context: ./notifications-service/
      dockerfile: dev.Dockerfile
    volumes:
      - ./notifications-service/:/app
    depends_on:
      - kafka
      - mongo
    environment:
      PORT: 8001
      MONGO_HOST: mongo
      MONGO_PORT: 27017
      MONGO_USER: root
      MONGO_PASSWORD: example
      MONGO_DB_NAME: 'notifications-service'
      KAFKA_BROKERS_CSV: kafka:9092
      KAFKA_GROUP_ID: 'notifications'
      CONSUMER_SERVICE_GROUP_ID: 'consumer'
      PAGE_CAPTURE_SERVICE_GROUP_ID: 'page-capture'
      SCREENSHOT_META_SERVICE_GROUP_ID: 'screenshot-meta'
      NOTIFICATION_SERVICE_GROUP_ID: 'notifications'
      SCREENSHOT_REQUEST_SERVICE_GROUP_ID: 'screenshot-requests'
    ports:
      - "8001:8001"

  consumer-service:
    platform: 'linux/amd64'
    build:
      context: ./consumer-service/
      dockerfile: dev.Dockerfile
    volumes:
      - ./consumer-service/:/app
    depends_on:
      - kafka
      - mongo
    environment:
      PORT: 8002
      MONGO_HOST: mongo
      MONGO_PORT: 27017
      MONGO_USER: root
      MONGO_PASSWORD: example
      MONGO_DB_NAME: 'consumer-service'
      KAFKA_BROKERS_CSV: kafka:9092
      KAFKA_GROUP_ID: 'consumer'
      CONSUMER_SERVICE_GROUP_ID: 'consumer'
      PAGE_CAPTURE_SERVICE_GROUP_ID: 'page-capture'
      SCREENSHOT_META_SERVICE_GROUP_ID: 'screenshot-meta'
      NOTIFICATION_SERVICE_GROUP_ID: 'notifications'
      SCREENSHOT_REQUEST_SERVICE_GROUP_ID: 'screenshot-requests'
    ports:
      - "8002:8002"

  page-capture-service:
    build:
      context: ./page-capture-service/
      dockerfile: dev.Dockerfile
    volumes:
      - ./page-capture-service/:/app
    depends_on:
      - kafka
      - mongo
    environment:
      PORT: 8003
      MONGO_HOST: mongo
      MONGO_PORT: 27017
      MONGO_USER: root
      MONGO_PASSWORD: example
      MONGO_DB_NAME: 'page-capture'
      KAFKA_BROKERS_CSV: kafka:9092
      KAFKA_GROUP_ID: 'page-capture'
      CONSUMER_SERVICE_GROUP_ID: 'consumer'
      PAGE_CAPTURE_SERVICE_GROUP_ID: 'page-capture'
      SCREENSHOT_META_SERVICE_GROUP_ID: 'screenshot-meta'
      NOTIFICATION_SERVICE_GROUP_ID: 'notifications'
      SCREENSHOT_REQUEST_SERVICE_GROUP_ID: 'screenshot-requests'
      MINIO_ENDPOINT: 'minio'
      MINIO_PORT: '9000'
      MINIO_ACCESS_KEY: '6WbKp35bPihUG7RKXXg2'
      MINIO_SECRET_KEY: 'AtcRtGT6Prq8rplVU8stWzQ2A81W2H9D4f2RVhvl'
      MINIO_BUCKET: 'screenshots'
      PUPPETEER_EXECUTABLE_PATH: "/usr/bin/chromium"
    ports:
      - "8003:8003"

  screenshot-meta-service:
    build:
      context: ./screenshot-meta-service/
      dockerfile: dev.Dockerfile
    volumes:
      - ./screenshot-meta-service/:/app
    depends_on:
      - kafka
      - mongo
    environment:
      PORT: 8004
      MONGO_HOST: mongo
      MONGO_PORT: 27017
      MONGO_USER: root
      MONGO_PASSWORD: example
      MONGO_DB_NAME: 'screenshot-meta'
      KAFKA_BROKERS_CSV: kafka:9092
      KAFKA_GROUP_ID: 'screenshot-meta'
      CONSUMER_SERVICE_GROUP_ID: 'consumer'
      PAGE_CAPTURE_SERVICE_GROUP_ID: 'page-capture'
      SCREENSHOT_META_SERVICE_GROUP_ID: 'screenshot-meta'
      NOTIFICATION_SERVICE_GROUP_ID: 'notifications'
      SCREENSHOT_REQUEST_SERVICE_GROUP_ID: 'screenshot-requests'
    ports:
      - "8004:8004"

  minio:
    image: minio/minio
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"  # API port
      - "9001:9001"  # Web console port
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data


  keycloak_web:
    platform: 'linux/amd64'
    image: quay.io/keycloak/keycloak:23.0.7
    container_name: keycloak_web
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloakdb:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: password
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 8080
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_LOG_LEVEL: info
      KC_METRICS_ENABLED: true
      KC_HEALTH_ENABLED: true
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    command: start-dev
    depends_on:
      - keycloakdb
    ports:
      - "8080:8080"

  keycloakdb:
    platform: 'linux/amd64'
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password

  mongo:
    platform: 'linux/amd64'
    image: mongo:4.4.18
    volumes:
      - mongo-volume:/data/db
      - mongo-conf-volume:/data/configdb
      - ./configs:/data/keys
    ports:
      - '27017:27017'
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      # mongo "mongodb://root:example@localhost:27017/?replicaSet=rs0"
      # openssl rand -base64 756 > mongo.key
      # rs.initiate({_id:'rs0',members:[{_id:0,host:'mongo:27017',priority:1}]});
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017", "--keyFile", "/data/keys/mongo.key"]

  kafka:
    platform: 'linux/amd64'
    image: bitnami/kafka:3.9.0
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      # KRaft mode configuration
      KAFKA_CFG_PROCESS_ROLES: "controller,broker"
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_KRAFT_CLUSTER_ID: "ZgYhN123S8q9r7QwRDqriA"

      # Listeners configuration
      KAFKA_CFG_LISTENERS: "CONTROLLER://:9093,PLAINTEXT://:9092"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://:9092"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"

      # Other settings
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      ALLOW_PLAINTEXT_LISTENER: "yes"
    volumes:
      - kafka_data:/bitnami/kafka


  kafka-ui:
#    platform: 'linux/amd64'
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8088:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092

  jaeger:
    image: jaegertracing/jaeger:2.3.0
    ports:
      - "16686:16686"
      - "4317:4317"
      - "4318:4318"
      - "5778:5778"
      - "9411:9411"

volumes:
  mongo-volume:
  mongo-conf-volume:
  kafka-volume:
  kafka_data:
  postgres_data:
  minio_data:



